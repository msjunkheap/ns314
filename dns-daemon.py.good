#!/usr/bin/env python

import sys, time, socket, struct
from daemon import Daemon

# Open our log file to print for errors
LOG = open('debug.log', 'w')
# Bind to localhost on port 5300
IP = '127.0.0.1'
PORT = 5300
# Create our struct format to separate the header into variables
HEADER_STRUCT = '!HBBHHHH'

# Send all responses back with localhost and a 5 minute TTL
ANSWER = (127, 0, 0, 1)
TTL = 300

# Define our logging function to write messages to the error log
def log(*messages):
	LOG.write(' '.join([str(m) for m in messages]))
	LOG.write('\n')
	LOG.flush()

def parse_request(input):
	# Strip the header from the request and slice it into separate variables using our struct pattern
	ID, DATA1, DATA2, QDCT, ANCT, NSCT, ARCT = struct.unpack(HEADER_STRUCT, input[:12])	
	BODY = input[12:]	# Put the rest of the request into its own variable
	labels = []		# Create a list to store each section of the request name (mail, google, com)
	while ord(BODY[0]):		# While the first character of BODY is not an unsigned char of 0 denoting the end of the request string
		length = ord(BODY[0])		# The length of our string is the first byte
		label = BODY[1:length+1]	# Grab the rest of the string using our length
		BODY = BODY[length+1:]		# Cut the string we extracted off the front of the data
		labels.append(label)		# Add the string to our list of labels
	QTYPE = struct.unpack('!H', BODY[1:3])[0]	# Pull the QTYPE from the request
	QCLASS = struct.unpack('!H', BODY[3:5])[0]	# Pull the QCLASS of the request (it's going to be IN, except for cases of black magic)
	QR = DATA1 >> 7			# Shift the 8th digit of DATA1 to the first and save it as QR
	OPCODE = (DATA1 & 0x7F) >> 3	# AND 0x7F against DATA1 to cut off the last char, and shift the smallest three digits off the end
	AA = (DATA1 & 0x04) >> 2	# AND DATA1 and 0x04, then shift two digits off the end
	TC = (DATA1 & 0x02) >> 1	# AND DATA1 and 0x02, then shift a digit off the end
	RD = (DATA1 & 0x01)		# AND DATA1 and 0x01
	RA = DATA2 >> 7			# Shift 7 digits off the end of DATA2 and save the last digit
	Z  = (DATA2 & 0x70) >> 4	# AND DATA2 and 0x70 then shift 4 digits off the end
	RCODE = (DATA2 & 0x0F)		# AND DATA2 and 0x0F
	# Return our header data in a list
	return {
		'ID': ID,
		'DATA1': DATA1,
		'DATA2': DATA2,
		'QR': QR,
		'OPCODE': OPCODE,
		'AA': AA,
		'TC': TC,
		'RD': RD,
		'RA': RA,
		'Z': Z,
		'RCODE': RCODE,
		'QDCT': QDCT,
		'ANCT': ANCT,
		'NSCT': NSCT,
		'ARCT': ARCT,
		'labels': labels,
		'QTYPE': QTYPE,
		'QCLASS': QCLASS
		}

def build_response(request):
	response = [] # Build a list to put our request in
	DATA1 = request['DATA1'] 
	DATA1 = (DATA1 | 0x80) # Set answer as response
	DATA1 = (DATA1 | 0x04) # Set answer as authoritative
	DATA1 = (DATA1 & 0xFE) # Set recursion desired off for our response
	response.append(struct.pack(HEADER_STRUCT, 
		request['ID'],		# Set our response ID to match the incoming request
		DATA1,			# Insert our DATA1 configuration byte
		request['DATA2'],	# Insert our DATA2 configuration byte
		0, # Number of entries in the question section (none for responses)
		1, # Number of resource records in the answer section
		0, # Number of name server resource records in the authority records section
		0  # Number of resource records in the additional records section
	))
	
	for label in request['labels']:			# Run through our list of labels
		response.append(chr(len(label)))	# Append the string length before appending the string itself
		response.append(label)
	response.append('\0')				# Finish our label list with a 1 byte binary zero to signify the end of the response labels
	response.append(struct.pack('!HHIH', request['QTYPE'], request['QCLASS'], TTL, len(ANSWER)))	# Pack the QTYPE and QCLASS onto the end of the request to mirror the request
	response.append(struct.pack('!BBBB', *ANSWER))	# Send back the IP address in binary format
	return ''.join(response)			# Concatenate everything into one string

class MyDaemon(Daemon):
	def run(self):
		sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
		sock.bind( (IP, PORT) )

		while True:
			data, addr = sock.recvfrom( 512 )		# Save the packet data and client address
			#log(parse_request(data))			# Log the request to our error log
			request = parse_request(data)			# Parse the request to a list
			sock.sendto(build_response(request), addr)	# Return our processed response back to the client

if __name__ == "__main__":
	daemon = MyDaemon('/tmp/daemon-example.pid')
	if len(sys.argv) == 2:
		if 'start' == sys.argv[1]:
			daemon.start()
		elif 'stop' == sys.argv[1]:
			daemon.stop()
		elif 'restart' == sys.argv[1]:
			daemon.restart()
		elif 'run' == sys.argv[1]:
			daemon.run()
		else:
			print "Unknown command"
			sys.exit(2)
		sys.exit(0)
	else:
		print "usage: %s start|stop|restart" % sys.argv[0]
		sys.exit(2)
